
Radio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000dc2  00000e56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000210  00800064  00800064  00000e5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001fa4  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c0  00000000  00000000  00002f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095c  00000000  00000000  0000364e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  00003fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000508  00000000  00000000  000043ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000188e  00000000  00000000  000048f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00006182  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	ab c1       	rjmp	.+854    	; 0x358 <__ctors_end>
   2:	c5 c1       	rjmp	.+906    	; 0x38e <__bad_interrupt>
   4:	c4 c1       	rjmp	.+904    	; 0x38e <__bad_interrupt>
   6:	c3 c1       	rjmp	.+902    	; 0x38e <__bad_interrupt>
   8:	c2 c1       	rjmp	.+900    	; 0x38e <__bad_interrupt>
   a:	c1 c1       	rjmp	.+898    	; 0x38e <__bad_interrupt>
   c:	c0 c1       	rjmp	.+896    	; 0x38e <__bad_interrupt>
   e:	bf c1       	rjmp	.+894    	; 0x38e <__bad_interrupt>
  10:	be c1       	rjmp	.+892    	; 0x38e <__bad_interrupt>
  12:	b3 c2       	rjmp	.+1382   	; 0x57a <__vector_9>
  14:	bc c1       	rjmp	.+888    	; 0x38e <__bad_interrupt>
  16:	bb c1       	rjmp	.+886    	; 0x38e <__bad_interrupt>
  18:	ba c1       	rjmp	.+884    	; 0x38e <__bad_interrupt>
  1a:	b9 c1       	rjmp	.+882    	; 0x38e <__bad_interrupt>
  1c:	b8 c1       	rjmp	.+880    	; 0x38e <__bad_interrupt>
  1e:	b7 c1       	rjmp	.+878    	; 0x38e <__bad_interrupt>
  20:	b6 c1       	rjmp	.+876    	; 0x38e <__bad_interrupt>
  22:	b5 c1       	rjmp	.+874    	; 0x38e <__bad_interrupt>
  24:	b4 c1       	rjmp	.+872    	; 0x38e <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	46 4d       	sbci	r20, 0xD6	; 214
	...

00000029 <__c.2360>:
  29:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000038 <FontLookup>:
  38:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  48:	7f 14 7f 14 24 2a 7f 2a 12 4c 2c 10 68 64 36 49     ....$*.*.L,.hd6I
  58:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  68:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
  78:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  88:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  98:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  a8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  b8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  c8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
  d8:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
  e8:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
  f8:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 108:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 118:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 128:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 138:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 148:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 158:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 168:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 178:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 188:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 198:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1a8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1b8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1c8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 1d8:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 1e8:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 1f8:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 208:	00 00 41 36 08 00 08 04 08 10 08 ff ff ff ff ff     ..A6............
 218:	7c 12 11 12 7c 7f 49 49 49 31 7f 49 49 49 36 7f     |...|.III1.III6.
 228:	01 01 01 01 60 3f 21 3f 60 7f 49 49 49 41 77 08     ....`?!?`.IIIAw.
 238:	7f 08 77 22 41 49 49 36 7f 10 08 04 7f 7e 10 09     ..w"AII6.....~..
 248:	04 7e 7f 08 14 22 41 40 3e 01 01 7f 7f 02 0c 02     .~..."A@>.......
 258:	7f 7f 08 08 08 7f 3e 41 41 41 3e 7f 01 01 01 7f     ......>AAA>.....
 268:	7f 09 09 09 06 3e 41 41 41 22 01 01 7f 01 01 07     .....>AAA"......
 278:	48 48 48 3f 0e 11 7f 11 0e 63 14 08 14 63 3f 20     HHH?.....c...c? 
 288:	20 3f 60 07 08 08 08 7f 7f 40 7e 40 7f 3f 20 3f      ?`......@~@.? ?
 298:	20 7f 01 7f 48 48 30 7f 48 30 00 7f 00 7f 48 48      ...HH0.H0....HH
 2a8:	30 22 41 49 49 3e 7f 08 3e 41 3e 46 29 19 09 7f     0"AII>..>A>F)...
 2b8:	20 54 54 54 78 3c 4a 4a 4a 31 7c 54 54 28 00 7c      TTTx<JJJ1|TT(.|
 2c8:	04 04 0c 00 60 3c 24 3c 60 38 54 54 54 18 6c 10     ....`<$<`8TTT.l.
 2d8:	7c 10 6c 00 44 54 54 28 7c 20 10 08 7c 7c 21 12     |.l.DTT(| ..||!.
 2e8:	09 7c 7c 10 28 44 00 40 38 04 04 7c 7c 08 10 08     .||.(D.@8..||...
 2f8:	7c 7c 10 10 10 7c 38 44 44 44 38 7c 04 04 04 7c     ||...|8DDD8|...|
 308:	7c 14 14 14 08 38 44 44 44 00 04 04 7c 04 04 0c     |....8DDD...|...
 318:	50 50 50 3c 08 14 7c 14 08 44 28 10 28 44 3c 20     PPP<..|..D(.(D< 
 328:	20 3c 60 0c 10 10 10 7c 7c 40 7c 40 7c 3c 20 3c      <`....||@|@|< <
 338:	20 7c 04 7c 50 50 20 7c 50 20 00 7c 00 7c 50 50      |.|PP |P .|.|PP
 348:	20 28 44 54 54 38 7c 10 38 44 38 48 54 34 14 7c      (DTT8|.8D8HT4.|

00000358 <__ctors_end>:
 358:	11 24       	eor	r1, r1
 35a:	1f be       	out	0x3f, r1	; 63
 35c:	cf e5       	ldi	r28, 0x5F	; 95
 35e:	d4 e0       	ldi	r29, 0x04	; 4
 360:	de bf       	out	0x3e, r29	; 62
 362:	cd bf       	out	0x3d, r28	; 61

00000364 <__do_copy_data>:
 364:	10 e0       	ldi	r17, 0x00	; 0
 366:	a0 e6       	ldi	r26, 0x60	; 96
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	e2 ec       	ldi	r30, 0xC2	; 194
 36c:	fd e0       	ldi	r31, 0x0D	; 13
 36e:	02 c0       	rjmp	.+4      	; 0x374 <__do_copy_data+0x10>
 370:	05 90       	lpm	r0, Z+
 372:	0d 92       	st	X+, r0
 374:	a4 36       	cpi	r26, 0x64	; 100
 376:	b1 07       	cpc	r27, r17
 378:	d9 f7       	brne	.-10     	; 0x370 <__do_copy_data+0xc>

0000037a <__do_clear_bss>:
 37a:	22 e0       	ldi	r18, 0x02	; 2
 37c:	a4 e6       	ldi	r26, 0x64	; 100
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	01 c0       	rjmp	.+2      	; 0x384 <.do_clear_bss_start>

00000382 <.do_clear_bss_loop>:
 382:	1d 92       	st	X+, r1

00000384 <.do_clear_bss_start>:
 384:	a4 37       	cpi	r26, 0x74	; 116
 386:	b2 07       	cpc	r27, r18
 388:	e1 f7       	brne	.-8      	; 0x382 <.do_clear_bss_loop>
 38a:	1b d1       	rcall	.+566    	; 0x5c2 <main>
 38c:	18 c5       	rjmp	.+2608   	; 0xdbe <_exit>

0000038e <__bad_interrupt>:
 38e:	38 ce       	rjmp	.-912    	; 0x0 <__vectors>

00000390 <BUT_Init>:
 390:	84 b3       	in	r24, 0x14	; 20
 392:	80 7f       	andi	r24, 0xF0	; 240
 394:	84 bb       	out	0x14, r24	; 20
 396:	85 b3       	in	r24, 0x15	; 21
 398:	8f 60       	ori	r24, 0x0F	; 15
 39a:	85 bb       	out	0x15, r24	; 21
 39c:	08 95       	ret

0000039e <BUT_Debrief>:
 39e:	98 9b       	sbis	0x13, 0	; 19
 3a0:	15 c0       	rjmp	.+42     	; 0x3cc <BUT_Debrief+0x2e>
 3a2:	9a 9b       	sbis	0x13, 2	; 19
 3a4:	15 c0       	rjmp	.+42     	; 0x3d0 <BUT_Debrief+0x32>
 3a6:	99 9b       	sbis	0x13, 1	; 19
 3a8:	15 c0       	rjmp	.+42     	; 0x3d4 <BUT_Debrief+0x36>
 3aa:	9b 9b       	sbis	0x13, 3	; 19
 3ac:	15 c0       	rjmp	.+42     	; 0x3d8 <BUT_Debrief+0x3a>
 3ae:	1a c0       	rjmp	.+52     	; 0x3e4 <BUT_Debrief+0x46>
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	80 93 64 00 	sts	0x0064, r24
 3b6:	90 93 65 00 	sts	0x0065, r25
 3ba:	08 95       	ret
 3bc:	8f 5f       	subi	r24, 0xFF	; 255
 3be:	80 93 64 00 	sts	0x0064, r24
 3c2:	83 30       	cpi	r24, 0x03	; 3
 3c4:	89 f4       	brne	.+34     	; 0x3e8 <BUT_Debrief+0x4a>
 3c6:	90 93 65 00 	sts	0x0065, r25
 3ca:	08 95       	ret
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <BUT_Debrief+0x3c>
 3d0:	93 e0       	ldi	r25, 0x03	; 3
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <BUT_Debrief+0x3c>
 3d4:	92 e0       	ldi	r25, 0x02	; 2
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <BUT_Debrief+0x3c>
 3d8:	94 e0       	ldi	r25, 0x04	; 4
 3da:	80 91 64 00 	lds	r24, 0x0064
 3de:	8d 30       	cpi	r24, 0x0D	; 13
 3e0:	68 f3       	brcs	.-38     	; 0x3bc <BUT_Debrief+0x1e>
 3e2:	e6 cf       	rjmp	.-52     	; 0x3b0 <BUT_Debrief+0x12>
 3e4:	10 92 64 00 	sts	0x0064, r1
 3e8:	08 95       	ret

000003ea <BUT_GetKey>:
 3ea:	80 91 65 00 	lds	r24, 0x0065
 3ee:	10 92 65 00 	sts	0x0065, r1
 3f2:	08 95       	ret

000003f4 <i2c_stop_cond>:

//===============================================================
//                   Генерация условия стоп
//===============================================================
void i2c_stop_cond (void)	{
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
 3f4:	a5 9a       	sbi	0x14, 5	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f6:	8a e0       	ldi	r24, 0x0A	; 10
 3f8:	8a 95       	dec	r24
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <i2c_stop_cond+0x4>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <i2c_stop_cond+0xa>
	I2C_DELAY
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
 3fe:	a4 9a       	sbi	0x14, 4	; 20
 400:	8a e0       	ldi	r24, 0x0A	; 10
 402:	8a 95       	dec	r24
 404:	f1 f7       	brne	.-4      	; 0x402 <i2c_stop_cond+0xe>
 406:	00 c0       	rjmp	.+0      	; 0x408 <i2c_stop_cond+0x14>
	I2C_DELAY
		
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
 408:	a5 98       	cbi	0x14, 5	; 20
 40a:	8a e0       	ldi	r24, 0x0A	; 10
 40c:	8a 95       	dec	r24
 40e:	f1 f7       	brne	.-4      	; 0x40c <i2c_stop_cond+0x18>
 410:	00 c0       	rjmp	.+0      	; 0x412 <i2c_stop_cond+0x1e>
	I2C_DELAY
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
 412:	a4 98       	cbi	0x14, 4	; 20
 414:	8a e0       	ldi	r24, 0x0A	; 10
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <i2c_stop_cond+0x22>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <i2c_stop_cond+0x28>
	I2C_DELAY
	
	// проверка фрейм-ошибки
	i2c_frame_error=0;									// сброс счётчика фрейм-ошибок
 41c:	10 92 70 00 	sts	0x0070, r1
	if ((I2C_PIN & _BV(SDA)) == 0) i2c_frame_error++;	// проберяем, чтобы на ноге SDA была лог.1, иначе выдаём ошибку фрейма
 420:	9c 99       	sbic	0x13, 4	; 19
 422:	05 c0       	rjmp	.+10     	; 0x42e <i2c_stop_cond+0x3a>
 424:	80 91 70 00 	lds	r24, 0x0070
 428:	8f 5f       	subi	r24, 0xFF	; 255
 42a:	80 93 70 00 	sts	0x0070, r24
	if ((I2C_PIN & _BV(SCL)) == 0) i2c_frame_error++;	// проберяем, чтобы на ноге SCL была лог.1, иначе выдаём ошибку фрейма
 42e:	9d 99       	sbic	0x13, 5	; 19
 430:	05 c0       	rjmp	.+10     	; 0x43c <i2c_stop_cond+0x48>
 432:	80 91 70 00 	lds	r24, 0x0070
 436:	8f 5f       	subi	r24, 0xFF	; 255
 438:	80 93 70 00 	sts	0x0070, r24
 43c:	8a e0       	ldi	r24, 0x0A	; 10
 43e:	8a 95       	dec	r24
 440:	f1 f7       	brne	.-4      	; 0x43e <i2c_stop_cond+0x4a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <i2c_stop_cond+0x50>
 444:	8a e0       	ldi	r24, 0x0A	; 10
 446:	8a 95       	dec	r24
 448:	f1 f7       	brne	.-4      	; 0x446 <i2c_stop_cond+0x52>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <i2c_stop_cond+0x58>
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	8a 95       	dec	r24
 450:	f1 f7       	brne	.-4      	; 0x44e <i2c_stop_cond+0x5a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <i2c_stop_cond+0x60>
 454:	8a e0       	ldi	r24, 0x0A	; 10
 456:	8a 95       	dec	r24
 458:	f1 f7       	brne	.-4      	; 0x456 <i2c_stop_cond+0x62>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <i2c_stop_cond+0x68>
 45c:	08 95       	ret

0000045e <i2c_init>:
//===============================================================
//                    инициализация шины I2C
//===============================================================
void i2c_init (void) {
	////////для I2C/////////
	I2C_DDR &= ~_BV(SDA);		// когда DDR=0, вывод SDA висит в воздухе, когда DDR=1 то SDA притянута к земле (регистром DDR мы и будем манипулировать)
 45e:	a4 98       	cbi	0x14, 4	; 20
	I2C_DDR &= ~_BV(SCL);		// когда DDR=0, вывод SCL висит в воздухе, когда DDR=1 то SCL притянута к земле (регистром DDR мы и будем манипулировать)
 460:	a5 98       	cbi	0x14, 5	; 20
	I2C_PORT &= ~_BV(SDA);      // PORT=0 означает, что когда DDR=1 то SDA притянута к земле, когда DDR=0, то SDA висит в воздухе
 462:	ac 98       	cbi	0x15, 4	; 21
	I2C_PORT &= ~_BV(SCL);      // PORT=0 означает, что когда DDR=1 то SCL притянута к земле, когда DDR=0, то SCL висит в воздухе
 464:	ad 98       	cbi	0x15, 5	; 21
	i2c_stop_cond();   // стоп шины на случай сбоев
 466:	c6 df       	rcall	.-116    	; 0x3f4 <i2c_stop_cond>
	i2c_stop_cond();   // стоп шины на случай сбоев
 468:	c5 df       	rcall	.-118    	; 0x3f4 <i2c_stop_cond>
 46a:	08 95       	ret

0000046c <i2c_start_cond>:

//===============================================================
//                    Генерация условия старт
//===============================================================
void i2c_start_cond (void)	{	
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
 46c:	a4 9a       	sbi	0x14, 4	; 20
 46e:	8a e0       	ldi	r24, 0x0A	; 10
 470:	8a 95       	dec	r24
 472:	f1 f7       	brne	.-4      	; 0x470 <i2c_start_cond+0x4>
 474:	00 c0       	rjmp	.+0      	; 0x476 <i2c_start_cond+0xa>
	I2C_DELAY
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
 476:	a5 9a       	sbi	0x14, 5	; 20
 478:	8a e0       	ldi	r24, 0x0A	; 10
 47a:	8a 95       	dec	r24
 47c:	f1 f7       	brne	.-4      	; 0x47a <i2c_start_cond+0xe>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <i2c_start_cond+0x14>
 480:	08 95       	ret

00000482 <i2c_send_byte>:

                   
//===============================================================
//                    Отправка байта по I2С
//===============================================================
unsigned char i2c_send_byte (unsigned char data)	{	
 482:	98 e0       	ldi	r25, 0x08	; 8
 unsigned char i;
 unsigned char ack=1;			//АСК, если АСК=1 – произошла ошибка
	for (i=0;i<8;i++)
	{
		if ((data&0x80)==0x00) I2C_DDR |= _BV(SDA);	// Выставить бит на SDA (лог.0)
 484:	88 23       	and	r24, r24
 486:	14 f0       	brlt	.+4      	; 0x48c <i2c_send_byte+0xa>
 488:	a4 9a       	sbi	0x14, 4	; 20
 48a:	01 c0       	rjmp	.+2      	; 0x48e <i2c_send_byte+0xc>
		else I2C_DDR &= ~_BV(SDA); // лог.1
 48c:	a4 98       	cbi	0x14, 4	; 20
 48e:	2a e0       	ldi	r18, 0x0A	; 10
 490:	2a 95       	dec	r18
 492:	f1 f7       	brne	.-4      	; 0x490 <i2c_send_byte+0xe>
 494:	00 c0       	rjmp	.+0      	; 0x496 <i2c_send_byte+0x14>
		I2C_DELAY
		I2C_DDR &= ~_BV(SCL);	// Записать его импульсом на SCL       // отпустить SCL (лог.1)
 496:	a5 98       	cbi	0x14, 5	; 20
 498:	2a e0       	ldi	r18, 0x0A	; 10
 49a:	2a 95       	dec	r18
 49c:	f1 f7       	brne	.-4      	; 0x49a <i2c_send_byte+0x18>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <i2c_send_byte+0x1e>
		I2C_DELAY
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
 4a0:	a5 9a       	sbi	0x14, 5	; 20
		data=data<<1;
 4a2:	88 0f       	add	r24, r24
 4a4:	91 50       	subi	r25, 0x01	; 1
//                    Отправка байта по I2С
//===============================================================
unsigned char i2c_send_byte (unsigned char data)	{	
 unsigned char i;
 unsigned char ack=1;			//АСК, если АСК=1 – произошла ошибка
	for (i=0;i<8;i++)
 4a6:	71 f7       	brne	.-36     	; 0x484 <i2c_send_byte+0x2>
		I2C_DDR &= ~_BV(SCL);	// Записать его импульсом на SCL       // отпустить SCL (лог.1)
		I2C_DELAY
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
		data=data<<1;
	}
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1), чтобы ведомое устройство смогло сгенерировать ACK
 4a8:	a4 98       	cbi	0x14, 4	; 20
 4aa:	8a e0       	ldi	r24, 0x0A	; 10
 4ac:	8a 95       	dec	r24
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <i2c_send_byte+0x2a>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <i2c_send_byte+0x30>
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1), чтобы ведомое устройство передало ACK
 4b2:	a5 98       	cbi	0x14, 5	; 20
 4b4:	2a e0       	ldi	r18, 0x0A	; 10
 4b6:	2a 95       	dec	r18
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <i2c_send_byte+0x34>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <i2c_send_byte+0x3a>
	I2C_DELAY
	if ((I2C_PIN&_BV(SDA))==_BV(SDA)) ack=1; else ack=0;	// Считать ACK
 4bc:	83 b3       	in	r24, 0x13	; 19

	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)  // приём ACK завершён
 4be:	a5 9a       	sbi	0x14, 5	; 20
	
	return ack; // вернуть ACK (0) или NACK (1)
}
 4c0:	82 95       	swap	r24
 4c2:	81 70       	andi	r24, 0x01	; 1
 4c4:	08 95       	ret

000004c6 <I2C_write>:


// запись I2C
void I2C_write (void) {

	i2c_start_cond();
 4c6:	d2 df       	rcall	.-92     	; 0x46c <i2c_start_cond>
	i2c_send_byte(0x20);
 4c8:	80 e2       	ldi	r24, 0x20	; 32
 4ca:	db df       	rcall	.-74     	; 0x482 <i2c_send_byte>
	i2c_send_byte(writeBuf[0]);
 4cc:	80 91 66 00 	lds	r24, 0x0066
 4d0:	d8 df       	rcall	.-80     	; 0x482 <i2c_send_byte>
	i2c_send_byte(writeBuf[1]);
 4d2:	80 91 67 00 	lds	r24, 0x0067
 4d6:	d5 df       	rcall	.-86     	; 0x482 <i2c_send_byte>
	i2c_send_byte(writeBuf[2]);
 4d8:	80 91 68 00 	lds	r24, 0x0068
 4dc:	d2 df       	rcall	.-92     	; 0x482 <i2c_send_byte>
	i2c_send_byte(writeBuf[3]);
 4de:	80 91 69 00 	lds	r24, 0x0069
 4e2:	cf df       	rcall	.-98     	; 0x482 <i2c_send_byte>
	i2c_send_byte(writeBuf[4]);
 4e4:	80 91 6a 00 	lds	r24, 0x006A
 4e8:	cc df       	rcall	.-104    	; 0x482 <i2c_send_byte>
	i2c_send_byte(writeBuf[5]);
 4ea:	80 91 6b 00 	lds	r24, 0x006B
 4ee:	c9 df       	rcall	.-110    	; 0x482 <i2c_send_byte>
	i2c_send_byte(writeBuf[6]);
 4f0:	80 91 6c 00 	lds	r24, 0x006C
 4f4:	c6 df       	rcall	.-116    	; 0x482 <i2c_send_byte>
	i2c_send_byte(writeBuf[7]);
 4f6:	80 91 6d 00 	lds	r24, 0x006D
 4fa:	c3 df       	rcall	.-122    	; 0x482 <i2c_send_byte>
	i2c_send_byte(writeBuf[8]);
 4fc:	80 91 6e 00 	lds	r24, 0x006E
 500:	c0 df       	rcall	.-128    	; 0x482 <i2c_send_byte>
	i2c_stop_cond(); 
 502:	78 df       	rcall	.-272    	; 0x3f4 <i2c_stop_cond>
 504:	08 95       	ret

00000506 <FM__init>:


// инициализация, конфигурация
void FM__init (void) {

	writeBuf[0] = 0b11010010;
 506:	82 ed       	ldi	r24, 0xD2	; 210
 508:	80 93 66 00 	sts	0x0066, r24
	writeBuf[1] = 0b10001101;
 50c:	8d e8       	ldi	r24, 0x8D	; 141
 50e:	80 93 67 00 	sts	0x0067, r24
	writeBuf[2] = 0;
 512:	10 92 68 00 	sts	0x0068, r1
	writeBuf[3] = 0;
 516:	10 92 69 00 	sts	0x0069, r1
	writeBuf[4] = 0b00000010;
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	80 93 6a 00 	sts	0x006A, r24
	writeBuf[5] = 0b00000000;
 520:	10 92 6b 00 	sts	0x006B, r1
	writeBuf[6] = 0b00001000;
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	80 93 6c 00 	sts	0x006C, r24
	writeBuf[7] = 0b10001111;
 52a:	8f e8       	ldi	r24, 0x8F	; 143
 52c:	80 93 6d 00 	sts	0x006D, r24
	//writeBuf[8] = 0b00000000;

	I2C_write();
 530:	ca df       	rcall	.-108    	; 0x4c6 <I2C_write>
 532:	08 95       	ret

00000534 <SetFreq>:
// задать частоту радиостанции
// частота в формате 101.2 FM пишем как 1012 (например)
// шаг 0.1 МГц
void SetFreq (uint16_t freq) {

	uint16_t chan = (freq - 870);
 534:	86 56       	subi	r24, 0x66	; 102
 536:	93 40       	sbci	r25, 0x03	; 3
	//uint16_t chan = (freq - RDA5807_FREQ_MIN) / RDA5807_CHAN_SPACING;

	writeBuf[2]  = chan >> 2;					// смаргшие 8 бит
 538:	9c 01       	movw	r18, r24
 53a:	36 95       	lsr	r19
 53c:	27 95       	ror	r18
 53e:	36 95       	lsr	r19
 540:	27 95       	ror	r18
 542:	20 93 68 00 	sts	0x0068, r18
	writeBuf[3] |= (chan << 6) | RDA5807_TUNE;
 546:	e9 e6       	ldi	r30, 0x69	; 105
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	90 81       	ld	r25, Z
 54c:	90 61       	ori	r25, 0x10	; 16
 54e:	82 95       	swap	r24
 550:	88 0f       	add	r24, r24
 552:	88 0f       	add	r24, r24
 554:	80 7c       	andi	r24, 0xC0	; 192
 556:	89 2b       	or	r24, r25
 558:	80 83       	st	Z, r24

	I2C_write();
 55a:	b5 df       	rcall	.-150    	; 0x4c6 <I2C_write>

	Lcd_prints(0,5,FONT_1X,(unsigned char *)PSTR("              "));
 55c:	29 e2       	ldi	r18, 0x29	; 41
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	65 e0       	ldi	r22, 0x05	; 5
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	53 d3       	rcall	.+1702   	; 0xc0e <Lcd_prints>
 568:	08 95       	ret

0000056a <Set_volume>:

// Задать уровень громкости (значение от 0 до 15)
void Set_volume (uint8_t vol)
{
	writeBuf[7] &= 0b11110000;
	writeBuf[7] |= vol;
 56a:	ed e6       	ldi	r30, 0x6D	; 109
 56c:	f0 e0       	ldi	r31, 0x00	; 0


// Задать уровень громкости (значение от 0 до 15)
void Set_volume (uint8_t vol)
{
	writeBuf[7] &= 0b11110000;
 56e:	90 81       	ld	r25, Z
 570:	90 7f       	andi	r25, 0xF0	; 240
	writeBuf[7] |= vol;
 572:	89 2b       	or	r24, r25
 574:	80 83       	st	Z, r24
	I2C_write();
 576:	a7 df       	rcall	.-178    	; 0x4c6 <I2C_write>
 578:	08 95       	ret

0000057a <__vector_9>:
// =========================================================================================================================
// =========================================================================================================================


ISR (TIMER0_OVF_vect)               // вектор прерывания по переполнеинию таймера 0
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31

BUT_Debrief ();                     // опрос 4х кнопок
 59c:	00 df       	rcall	.-512    	; 0x39e <BUT_Debrief>
Lcd_update();
 59e:	7b d1       	rcall	.+758    	; 0x896 <Lcd_update>

}
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	3f 91       	pop	r19
 5b6:	2f 91       	pop	r18
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <main>:



int main (void)
{
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
 5ca:	64 97       	sbiw	r28, 0x14	; 20
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	f8 94       	cli
 5d0:	de bf       	out	0x3e, r29	; 62
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	cd bf       	out	0x3d, r28	; 61

Lcd_init();
 5d6:	df d1       	rcall	.+958    	; 0x996 <Lcd_init>
i2c_init();
 5d8:	42 df       	rcall	.-380    	; 0x45e <i2c_init>
BUT_Init();
 5da:	da de       	rcall	.-588    	; 0x390 <BUT_Init>
FM__init();
 5dc:	94 df       	rcall	.-216    	; 0x506 <FM__init>


//инициализация таймера 0
TCCR0 |= 0b00000101;            // Включаем предделитель 1/1024
 5de:	83 b7       	in	r24, 0x33	; 51
 5e0:	85 60       	ori	r24, 0x05	; 5
 5e2:	83 bf       	out	0x33, r24	; 51
TIMSK |= 0b00000001;            // разрешаем прерывания по переполнению таймера T0.
 5e4:	89 b7       	in	r24, 0x39	; 57
 5e6:	81 60       	ori	r24, 0x01	; 1
 5e8:	89 bf       	out	0x39, r24	; 57
TCNT0=0;                        // Обнуляем счётный регистр таймера T0 
 5ea:	12 be       	out	0x32, r1	; 50

//station=eeprom_read_byte(&station_ee);
//set_station(station);                
Set_volume(volume);
 5ec:	80 91 60 00 	lds	r24, 0x0060
 5f0:	bc df       	rcall	.-136    	; 0x56a <Set_volume>

Lcd_clear();
 5f2:	39 d1       	rcall	.+626    	; 0x866 <Lcd_clear>


sei();                          // глобально разрешить прерывания
 5f4:	78 94       	sei
while(1)
{


i=BUT_GetKey();
if (i==1) {f++; if (f>1080) {f=870;} SetFreq(f);}
 5f6:	0f 2e       	mov	r0, r31
 5f8:	f6 e6       	ldi	r31, 0x66	; 102
 5fa:	cf 2e       	mov	r12, r31
 5fc:	f3 e0       	ldi	r31, 0x03	; 3
 5fe:	df 2e       	mov	r13, r31
 600:	f0 2d       	mov	r31, r0
if (i==2) {f--; if (f<870) {f=1080;} SetFreq(f);}
 602:	0f 2e       	mov	r0, r31
 604:	f8 e3       	ldi	r31, 0x38	; 56
 606:	ef 2e       	mov	r14, r31
 608:	f4 e0       	ldi	r31, 0x04	; 4
 60a:	ff 2e       	mov	r15, r31
 60c:	f0 2d       	mov	r31, r0

if (i==3){volume++; if (volume>15) {volume=15;} Set_volume(volume);}
 60e:	0f 2e       	mov	r0, r31
 610:	ff e0       	ldi	r31, 0x0F	; 15
 612:	8f 2e       	mov	r8, r31
 614:	f0 2d       	mov	r31, r0
if (i==4){volume--; if (volume<1) {volume=1;} Set_volume(volume);}
 616:	bb 24       	eor	r11, r11
 618:	b3 94       	inc	r11
//if (i==4) {station--; if (station<1) {station=15;} set_station(station);}

 
f1=f/1000;
f2=f/100-f1*10;
f3=f/10-f1*100-f2*10;
 61a:	0f 2e       	mov	r0, r31
 61c:	fc e9       	ldi	r31, 0x9C	; 156
 61e:	af 2e       	mov	r10, r31
 620:	f0 2d       	mov	r31, r0
f4=f-f1*1000-f2*100-f3*10;
 622:	0f 2e       	mov	r0, r31
 624:	f8 e1       	ldi	r31, 0x18	; 24
 626:	9f 2e       	mov	r9, r31
 628:	f0 2d       	mov	r31, r0

while(1)
{


i=BUT_GetKey();
 62a:	df de       	rcall	.-578    	; 0x3ea <BUT_GetKey>
 62c:	80 93 6f 00 	sts	0x006F, r24
if (i==1) {f++; if (f>1080) {f=870;} SetFreq(f);}
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	b9 f4       	brne	.+46     	; 0x662 <main+0xa0>
 634:	80 91 61 00 	lds	r24, 0x0061
 638:	90 91 62 00 	lds	r25, 0x0062
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	89 33       	cpi	r24, 0x39	; 57
 640:	24 e0       	ldi	r18, 0x04	; 4
 642:	92 07       	cpc	r25, r18
 644:	28 f4       	brcc	.+10     	; 0x650 <main+0x8e>
 646:	90 93 62 00 	sts	0x0062, r25
 64a:	80 93 61 00 	sts	0x0061, r24
 64e:	04 c0       	rjmp	.+8      	; 0x658 <main+0x96>
 650:	d0 92 62 00 	sts	0x0062, r13
 654:	c0 92 61 00 	sts	0x0061, r12
 658:	80 91 61 00 	lds	r24, 0x0061
 65c:	90 91 62 00 	lds	r25, 0x0062
 660:	69 df       	rcall	.-302    	; 0x534 <SetFreq>
if (i==2) {f--; if (f<870) {f=1080;} SetFreq(f);}
 662:	80 91 6f 00 	lds	r24, 0x006F
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	b9 f4       	brne	.+46     	; 0x698 <main+0xd6>
 66a:	80 91 61 00 	lds	r24, 0x0061
 66e:	90 91 62 00 	lds	r25, 0x0062
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	86 36       	cpi	r24, 0x66	; 102
 676:	23 e0       	ldi	r18, 0x03	; 3
 678:	92 07       	cpc	r25, r18
 67a:	28 f0       	brcs	.+10     	; 0x686 <main+0xc4>
 67c:	90 93 62 00 	sts	0x0062, r25
 680:	80 93 61 00 	sts	0x0061, r24
 684:	04 c0       	rjmp	.+8      	; 0x68e <main+0xcc>
 686:	f0 92 62 00 	sts	0x0062, r15
 68a:	e0 92 61 00 	sts	0x0061, r14
 68e:	80 91 61 00 	lds	r24, 0x0061
 692:	90 91 62 00 	lds	r25, 0x0062
 696:	4e df       	rcall	.-356    	; 0x534 <SetFreq>

if (i==3){volume++; if (volume>15) {volume=15;} Set_volume(volume);}
 698:	80 91 6f 00 	lds	r24, 0x006F
 69c:	83 30       	cpi	r24, 0x03	; 3
 69e:	69 f4       	brne	.+26     	; 0x6ba <main+0xf8>
 6a0:	80 91 60 00 	lds	r24, 0x0060
 6a4:	8f 5f       	subi	r24, 0xFF	; 255
 6a6:	80 31       	cpi	r24, 0x10	; 16
 6a8:	18 f4       	brcc	.+6      	; 0x6b0 <main+0xee>
 6aa:	80 93 60 00 	sts	0x0060, r24
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <main+0xf2>
 6b0:	80 92 60 00 	sts	0x0060, r8
 6b4:	80 91 60 00 	lds	r24, 0x0060
 6b8:	58 df       	rcall	.-336    	; 0x56a <Set_volume>
if (i==4){volume--; if (volume<1) {volume=1;} Set_volume(volume);}
 6ba:	80 91 6f 00 	lds	r24, 0x006F
 6be:	84 30       	cpi	r24, 0x04	; 4
 6c0:	61 f4       	brne	.+24     	; 0x6da <main+0x118>
 6c2:	80 91 60 00 	lds	r24, 0x0060
 6c6:	81 50       	subi	r24, 0x01	; 1
 6c8:	19 f0       	breq	.+6      	; 0x6d0 <main+0x10e>
 6ca:	80 93 60 00 	sts	0x0060, r24
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <main+0x112>
 6d0:	b0 92 60 00 	sts	0x0060, r11
 6d4:	80 91 60 00 	lds	r24, 0x0060
 6d8:	48 df       	rcall	.-368    	; 0x56a <Set_volume>
//if (i==3) {station++; if (station>15) {station=1;} set_station(station);}
//if (i==4) {station--; if (station<1) {station=15;} set_station(station);}

 
f1=f/1000;
 6da:	00 91 61 00 	lds	r16, 0x0061
 6de:	10 91 62 00 	lds	r17, 0x0062
 6e2:	98 01       	movw	r18, r16
 6e4:	36 95       	lsr	r19
 6e6:	27 95       	ror	r18
 6e8:	36 95       	lsr	r19
 6ea:	27 95       	ror	r18
 6ec:	36 95       	lsr	r19
 6ee:	27 95       	ror	r18
 6f0:	a5 ec       	ldi	r26, 0xC5	; 197
 6f2:	b0 e2       	ldi	r27, 0x20	; 32
 6f4:	1b d3       	rcall	.+1590   	; 0xd2c <__umulhisi3>
 6f6:	fc 01       	movw	r30, r24
 6f8:	f2 95       	swap	r31
 6fa:	e2 95       	swap	r30
 6fc:	ef 70       	andi	r30, 0x0F	; 15
 6fe:	ef 27       	eor	r30, r31
 700:	ff 70       	andi	r31, 0x0F	; 15
 702:	ef 27       	eor	r30, r31
 704:	e0 93 73 02 	sts	0x0273, r30
f2=f/100-f1*10;
 708:	8e 2f       	mov	r24, r30
 70a:	88 0f       	add	r24, r24
 70c:	48 2f       	mov	r20, r24
 70e:	44 0f       	add	r20, r20
 710:	44 0f       	add	r20, r20
 712:	48 0f       	add	r20, r24
 714:	98 01       	movw	r18, r16
 716:	36 95       	lsr	r19
 718:	27 95       	ror	r18
 71a:	36 95       	lsr	r19
 71c:	27 95       	ror	r18
 71e:	ab e7       	ldi	r26, 0x7B	; 123
 720:	b4 e1       	ldi	r27, 0x14	; 20
 722:	04 d3       	rcall	.+1544   	; 0xd2c <__umulhisi3>
 724:	96 95       	lsr	r25
 726:	87 95       	ror	r24
 728:	28 2f       	mov	r18, r24
 72a:	24 1b       	sub	r18, r20
 72c:	42 2f       	mov	r20, r18
 72e:	20 93 71 02 	sts	0x0271, r18
f3=f/10-f1*100-f2*10;
 732:	98 01       	movw	r18, r16
 734:	ad ec       	ldi	r26, 0xCD	; 205
 736:	bc ec       	ldi	r27, 0xCC	; 204
 738:	f9 d2       	rcall	.+1522   	; 0xd2c <__umulhisi3>
 73a:	96 95       	lsr	r25
 73c:	87 95       	ror	r24
 73e:	96 95       	lsr	r25
 740:	87 95       	ror	r24
 742:	96 95       	lsr	r25
 744:	87 95       	ror	r24
 746:	28 2f       	mov	r18, r24
 748:	ae 9e       	mul	r10, r30
 74a:	20 0d       	add	r18, r0
 74c:	11 24       	eor	r1, r1
 74e:	84 2f       	mov	r24, r20
 750:	88 0f       	add	r24, r24
 752:	98 2f       	mov	r25, r24
 754:	99 0f       	add	r25, r25
 756:	99 0f       	add	r25, r25
 758:	89 0f       	add	r24, r25
 75a:	28 1b       	sub	r18, r24
 75c:	20 93 70 02 	sts	0x0270, r18
f4=f-f1*1000-f2*100-f3*10;
 760:	9e 9e       	mul	r9, r30
 762:	00 0d       	add	r16, r0
 764:	11 24       	eor	r1, r1
 766:	4a 9d       	mul	r20, r10
 768:	00 0d       	add	r16, r0
 76a:	11 24       	eor	r1, r1
 76c:	22 0f       	add	r18, r18
 76e:	82 2f       	mov	r24, r18
 770:	88 0f       	add	r24, r24
 772:	88 0f       	add	r24, r24
 774:	28 0f       	add	r18, r24
 776:	02 1b       	sub	r16, r18
 778:	00 93 72 02 	sts	0x0272, r16
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 77c:	4a e0       	ldi	r20, 0x0A	; 10
 77e:	be 01       	movw	r22, r28
 780:	6f 5f       	subi	r22, 0xFF	; 255
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	cf 01       	movw	r24, r30
 786:	f2 d2       	rcall	.+1508   	; 0xd6c <__utoa_ncheck>
//Для вывода числа преобразуем его в строку при помощи встроенной 
//функции itoa(число, массив,система счисления)

char buff[20];
utoa(f1, buff, 10);
Lcd_print(1, 3, FONT_2X,(unsigned char *)buff);
 788:	9e 01       	movw	r18, r28
 78a:	2f 5f       	subi	r18, 0xFF	; 255
 78c:	3f 4f       	sbci	r19, 0xFF	; 255
 78e:	42 e0       	ldi	r20, 0x02	; 2
 790:	63 e0       	ldi	r22, 0x03	; 3
 792:	8b 2d       	mov	r24, r11
 794:	1b d2       	rcall	.+1078   	; 0xbcc <Lcd_print>
utoa(f2, buff, 10);
 796:	80 91 71 02 	lds	r24, 0x0271
 79a:	4a e0       	ldi	r20, 0x0A	; 10
 79c:	be 01       	movw	r22, r28
 79e:	6f 5f       	subi	r22, 0xFF	; 255
 7a0:	7f 4f       	sbci	r23, 0xFF	; 255
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	e3 d2       	rcall	.+1478   	; 0xd6c <__utoa_ncheck>
Lcd_print(3, 3, FONT_2X,(unsigned char *)buff);
 7a6:	9e 01       	movw	r18, r28
 7a8:	2f 5f       	subi	r18, 0xFF	; 255
 7aa:	3f 4f       	sbci	r19, 0xFF	; 255
 7ac:	42 e0       	ldi	r20, 0x02	; 2
 7ae:	63 e0       	ldi	r22, 0x03	; 3
 7b0:	83 e0       	ldi	r24, 0x03	; 3
 7b2:	0c d2       	rcall	.+1048   	; 0xbcc <Lcd_print>
utoa(f3, buff, 10);
 7b4:	80 91 70 02 	lds	r24, 0x0270
 7b8:	4a e0       	ldi	r20, 0x0A	; 10
 7ba:	be 01       	movw	r22, r28
 7bc:	6f 5f       	subi	r22, 0xFF	; 255
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	d4 d2       	rcall	.+1448   	; 0xd6c <__utoa_ncheck>
Lcd_print(5, 3, FONT_2X,(unsigned char *)buff);
 7c4:	9e 01       	movw	r18, r28
 7c6:	2f 5f       	subi	r18, 0xFF	; 255
 7c8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ca:	42 e0       	ldi	r20, 0x02	; 2
 7cc:	63 e0       	ldi	r22, 0x03	; 3
 7ce:	85 e0       	ldi	r24, 0x05	; 5
 7d0:	fd d1       	rcall	.+1018   	; 0xbcc <Lcd_print>

Lcd_pixel( 43,  32,  PIXEL_ON );   // точка
 7d2:	4b 2d       	mov	r20, r11
 7d4:	60 e2       	ldi	r22, 0x20	; 32
 7d6:	8b e2       	ldi	r24, 0x2B	; 43
 7d8:	37 d2       	rcall	.+1134   	; 0xc48 <Lcd_pixel>
Lcd_pixel( 43,  31,  PIXEL_ON );
 7da:	4b 2d       	mov	r20, r11
 7dc:	6f e1       	ldi	r22, 0x1F	; 31
 7de:	8b e2       	ldi	r24, 0x2B	; 43
 7e0:	33 d2       	rcall	.+1126   	; 0xc48 <Lcd_pixel>
Lcd_pixel( 43,  30,  PIXEL_ON );
 7e2:	4b 2d       	mov	r20, r11
 7e4:	6e e1       	ldi	r22, 0x1E	; 30
 7e6:	8b e2       	ldi	r24, 0x2B	; 43
 7e8:	2f d2       	rcall	.+1118   	; 0xc48 <Lcd_pixel>
Lcd_pixel( 42,  31,  PIXEL_ON );
 7ea:	4b 2d       	mov	r20, r11
 7ec:	6f e1       	ldi	r22, 0x1F	; 31
 7ee:	8a e2       	ldi	r24, 0x2A	; 42
 7f0:	2b d2       	rcall	.+1110   	; 0xc48 <Lcd_pixel>
Lcd_pixel( 44,  30,  PIXEL_ON );
 7f2:	4b 2d       	mov	r20, r11
 7f4:	6e e1       	ldi	r22, 0x1E	; 30
 7f6:	8c e2       	ldi	r24, 0x2C	; 44
 7f8:	27 d2       	rcall	.+1102   	; 0xc48 <Lcd_pixel>
Lcd_pixel( 44,  31,  PIXEL_ON );
 7fa:	4b 2d       	mov	r20, r11
 7fc:	6f e1       	ldi	r22, 0x1F	; 31
 7fe:	8c e2       	ldi	r24, 0x2C	; 44
 800:	23 d2       	rcall	.+1094   	; 0xc48 <Lcd_pixel>
Lcd_pixel( 44,  32,  PIXEL_ON );
 802:	4b 2d       	mov	r20, r11
 804:	60 e2       	ldi	r22, 0x20	; 32
 806:	8c e2       	ldi	r24, 0x2C	; 44
 808:	1f d2       	rcall	.+1086   	; 0xc48 <Lcd_pixel>
Lcd_pixel( 45,  31,  PIXEL_ON );
 80a:	4b 2d       	mov	r20, r11
 80c:	6f e1       	ldi	r22, 0x1F	; 31
 80e:	8d e2       	ldi	r24, 0x2D	; 45
 810:	1b d2       	rcall	.+1078   	; 0xc48 <Lcd_pixel>

utoa(f4, buff, 10);
 812:	80 91 72 02 	lds	r24, 0x0272
 816:	4a e0       	ldi	r20, 0x0A	; 10
 818:	be 01       	movw	r22, r28
 81a:	6f 5f       	subi	r22, 0xFF	; 255
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	a5 d2       	rcall	.+1354   	; 0xd6c <__utoa_ncheck>
Lcd_print(8, 3, FONT_2X,(unsigned char *)buff);
 822:	9e 01       	movw	r18, r28
 824:	2f 5f       	subi	r18, 0xFF	; 255
 826:	3f 4f       	sbci	r19, 0xFF	; 255
 828:	42 e0       	ldi	r20, 0x02	; 2
 82a:	63 e0       	ldi	r22, 0x03	; 3
 82c:	88 e0       	ldi	r24, 0x08	; 8
 82e:	ce d1       	rcall	.+924    	; 0xbcc <Lcd_print>

Lcd_prints(11, 3, FONT_1X,(unsigned char *)PSTR("FM"));
 830:	26 e2       	ldi	r18, 0x26	; 38
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	4b 2d       	mov	r20, r11
 836:	63 e0       	ldi	r22, 0x03	; 3
 838:	8b e0       	ldi	r24, 0x0B	; 11
 83a:	e9 d1       	rcall	.+978    	; 0xc0e <Lcd_prints>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 83c:	8f ef       	ldi	r24, 0xFF	; 255
 83e:	99 ef       	ldi	r25, 0xF9	; 249
 840:	20 e0       	ldi	r18, 0x00	; 0
 842:	81 50       	subi	r24, 0x01	; 1
 844:	90 40       	sbci	r25, 0x00	; 0
 846:	20 40       	sbci	r18, 0x00	; 0
 848:	e1 f7       	brne	.-8      	; 0x842 <main+0x280>
 84a:	00 c0       	rjmp	.+0      	; 0x84c <main+0x28a>
 84c:	00 00       	nop



_delay_ms(40);

} // end while(1)
 84e:	ed ce       	rjmp	.-550    	; 0x62a <main+0x68>

00000850 <LcdSend>:
 850:	c2 98       	cbi	0x18, 2	; 24
 852:	61 30       	cpi	r22, 0x01	; 1
 854:	11 f4       	brne	.+4      	; 0x85a <LcdSend+0xa>
 856:	c1 9a       	sbi	0x18, 1	; 24
 858:	01 c0       	rjmp	.+2      	; 0x85c <LcdSend+0xc>
 85a:	c1 98       	cbi	0x18, 1	; 24
 85c:	8f b9       	out	0x0f, r24	; 15
 85e:	77 9b       	sbis	0x0e, 7	; 14
 860:	fe cf       	rjmp	.-4      	; 0x85e <LcdSend+0xe>
 862:	c2 9a       	sbi	0x18, 2	; 24
 864:	08 95       	ret

00000866 <Lcd_clear>:
 866:	88 ef       	ldi	r24, 0xF8	; 248
 868:	91 e0       	ldi	r25, 0x01	; 1
 86a:	e8 e7       	ldi	r30, 0x78	; 120
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	df 01       	movw	r26, r30
 870:	9c 01       	movw	r18, r24
 872:	1d 92       	st	X+, r1
 874:	21 50       	subi	r18, 0x01	; 1
 876:	30 40       	sbci	r19, 0x00	; 0
 878:	e1 f7       	brne	.-8      	; 0x872 <Lcd_clear+0xc>
 87a:	10 92 77 00 	sts	0x0077, r1
 87e:	10 92 76 00 	sts	0x0076, r1
 882:	87 ef       	ldi	r24, 0xF7	; 247
 884:	91 e0       	ldi	r25, 0x01	; 1
 886:	90 93 75 00 	sts	0x0075, r25
 88a:	80 93 74 00 	sts	0x0074, r24
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	80 93 71 00 	sts	0x0071, r24
 894:	08 95       	ret

00000896 <Lcd_update>:
 896:	ef 92       	push	r14
 898:	ff 92       	push	r15
 89a:	0f 93       	push	r16
 89c:	1f 93       	push	r17
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	80 91 76 00 	lds	r24, 0x0076
 8a6:	90 91 77 00 	lds	r25, 0x0077
 8aa:	99 23       	and	r25, r25
 8ac:	2c f4       	brge	.+10     	; 0x8b8 <Lcd_update+0x22>
 8ae:	10 92 77 00 	sts	0x0077, r1
 8b2:	10 92 76 00 	sts	0x0076, r1
 8b6:	09 c0       	rjmp	.+18     	; 0x8ca <Lcd_update+0x34>
 8b8:	88 3f       	cpi	r24, 0xF8	; 248
 8ba:	91 40       	sbci	r25, 0x01	; 1
 8bc:	34 f0       	brlt	.+12     	; 0x8ca <Lcd_update+0x34>
 8be:	87 ef       	ldi	r24, 0xF7	; 247
 8c0:	91 e0       	ldi	r25, 0x01	; 1
 8c2:	90 93 77 00 	sts	0x0077, r25
 8c6:	80 93 76 00 	sts	0x0076, r24
 8ca:	80 91 74 00 	lds	r24, 0x0074
 8ce:	90 91 75 00 	lds	r25, 0x0075
 8d2:	99 23       	and	r25, r25
 8d4:	2c f4       	brge	.+10     	; 0x8e0 <Lcd_update+0x4a>
 8d6:	10 92 75 00 	sts	0x0075, r1
 8da:	10 92 74 00 	sts	0x0074, r1
 8de:	09 c0       	rjmp	.+18     	; 0x8f2 <Lcd_update+0x5c>
 8e0:	88 3f       	cpi	r24, 0xF8	; 248
 8e2:	91 40       	sbci	r25, 0x01	; 1
 8e4:	34 f0       	brlt	.+12     	; 0x8f2 <Lcd_update+0x5c>
 8e6:	87 ef       	ldi	r24, 0xF7	; 247
 8e8:	91 e0       	ldi	r25, 0x01	; 1
 8ea:	90 93 75 00 	sts	0x0075, r25
 8ee:	80 93 74 00 	sts	0x0074, r24
 8f2:	c0 91 76 00 	lds	r28, 0x0076
 8f6:	d0 91 77 00 	lds	r29, 0x0077
 8fa:	ce 01       	movw	r24, r28
 8fc:	64 e5       	ldi	r22, 0x54	; 84
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	02 d2       	rcall	.+1028   	; 0xd06 <__divmodhi4>
 902:	e6 2e       	mov	r14, r22
 904:	f8 2e       	mov	r15, r24
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	80 68       	ori	r24, 0x80	; 128
 90a:	a2 df       	rcall	.-188    	; 0x850 <LcdSend>
 90c:	e3 94       	inc	r14
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	8e 2d       	mov	r24, r14
 912:	80 64       	ori	r24, 0x40	; 64
 914:	9d df       	rcall	.-198    	; 0x850 <LcdSend>
 916:	80 91 74 00 	lds	r24, 0x0074
 91a:	90 91 75 00 	lds	r25, 0x0075
 91e:	8c 17       	cp	r24, r28
 920:	9d 07       	cpc	r25, r29
 922:	ec f0       	brlt	.+58     	; 0x95e <Lcd_update+0xc8>
 924:	8e 01       	movw	r16, r28
 926:	08 58       	subi	r16, 0x88	; 136
 928:	1f 4f       	sbci	r17, 0xFF	; 255
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	f8 01       	movw	r30, r16
 92e:	81 91       	ld	r24, Z+
 930:	8f 01       	movw	r16, r30
 932:	8e df       	rcall	.-228    	; 0x850 <LcdSend>
 934:	f3 94       	inc	r15
 936:	f3 e5       	ldi	r31, 0x53	; 83
 938:	ff 15       	cp	r31, r15
 93a:	48 f4       	brcc	.+18     	; 0x94e <Lcd_update+0xb8>
 93c:	60 e0       	ldi	r22, 0x00	; 0
 93e:	80 e8       	ldi	r24, 0x80	; 128
 940:	87 df       	rcall	.-242    	; 0x850 <LcdSend>
 942:	e3 94       	inc	r14
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	8e 2d       	mov	r24, r14
 948:	80 64       	ori	r24, 0x40	; 64
 94a:	82 df       	rcall	.-252    	; 0x850 <LcdSend>
 94c:	f1 2c       	mov	r15, r1
 94e:	21 96       	adiw	r28, 0x01	; 1
 950:	80 91 74 00 	lds	r24, 0x0074
 954:	90 91 75 00 	lds	r25, 0x0075
 958:	8c 17       	cp	r24, r28
 95a:	9d 07       	cpc	r25, r29
 95c:	34 f7       	brge	.-52     	; 0x92a <Lcd_update+0x94>
 95e:	60 e0       	ldi	r22, 0x00	; 0
 960:	81 e2       	ldi	r24, 0x21	; 33
 962:	76 df       	rcall	.-276    	; 0x850 <LcdSend>
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	85 e4       	ldi	r24, 0x45	; 69
 968:	73 df       	rcall	.-282    	; 0x850 <LcdSend>
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	80 e2       	ldi	r24, 0x20	; 32
 96e:	70 df       	rcall	.-288    	; 0x850 <LcdSend>
 970:	87 ef       	ldi	r24, 0xF7	; 247
 972:	91 e0       	ldi	r25, 0x01	; 1
 974:	90 93 77 00 	sts	0x0077, r25
 978:	80 93 76 00 	sts	0x0076, r24
 97c:	10 92 75 00 	sts	0x0075, r1
 980:	10 92 74 00 	sts	0x0074, r1
 984:	10 92 71 00 	sts	0x0071, r1
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	0f 91       	pop	r16
 990:	ff 90       	pop	r15
 992:	ef 90       	pop	r14
 994:	08 95       	ret

00000996 <Lcd_init>:
 996:	c0 9a       	sbi	0x18, 0	; 24
 998:	87 b3       	in	r24, 0x17	; 23
 99a:	8f 62       	ori	r24, 0x2F	; 47
 99c:	87 bb       	out	0x17, r24	; 23
 99e:	c0 98       	cbi	0x18, 0	; 24
 9a0:	c0 9a       	sbi	0x18, 0	; 24
 9a2:	80 e5       	ldi	r24, 0x50	; 80
 9a4:	8d b9       	out	0x0d, r24	; 13
 9a6:	c2 9a       	sbi	0x18, 2	; 24
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	81 e2       	ldi	r24, 0x21	; 33
 9ac:	51 df       	rcall	.-350    	; 0x850 <LcdSend>
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	88 ec       	ldi	r24, 0xC8	; 200
 9b2:	4e df       	rcall	.-356    	; 0x850 <LcdSend>
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	86 e0       	ldi	r24, 0x06	; 6
 9b8:	4b df       	rcall	.-362    	; 0x850 <LcdSend>
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	83 e1       	ldi	r24, 0x13	; 19
 9be:	48 df       	rcall	.-368    	; 0x850 <LcdSend>
 9c0:	60 e0       	ldi	r22, 0x00	; 0
 9c2:	80 e2       	ldi	r24, 0x20	; 32
 9c4:	45 df       	rcall	.-374    	; 0x850 <LcdSend>
 9c6:	60 e0       	ldi	r22, 0x00	; 0
 9c8:	8c e0       	ldi	r24, 0x0C	; 12
 9ca:	42 df       	rcall	.-380    	; 0x850 <LcdSend>
 9cc:	4c df       	rcall	.-360    	; 0x866 <Lcd_clear>
 9ce:	63 df       	rcall	.-314    	; 0x896 <Lcd_update>
 9d0:	08 95       	ret

000009d2 <LcdGotoXY>:
 9d2:	8e 30       	cpi	r24, 0x0E	; 14
 9d4:	a8 f4       	brcc	.+42     	; 0xa00 <LcdGotoXY+0x2e>
 9d6:	66 30       	cpi	r22, 0x06	; 6
 9d8:	a8 f4       	brcc	.+42     	; 0xa04 <LcdGotoXY+0x32>
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	9c 01       	movw	r18, r24
 9de:	22 0f       	add	r18, r18
 9e0:	33 1f       	adc	r19, r19
 9e2:	82 0f       	add	r24, r18
 9e4:	93 1f       	adc	r25, r19
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	24 e5       	ldi	r18, 0x54	; 84
 9ec:	62 9f       	mul	r22, r18
 9ee:	80 0d       	add	r24, r0
 9f0:	91 1d       	adc	r25, r1
 9f2:	11 24       	eor	r1, r1
 9f4:	90 93 73 00 	sts	0x0073, r25
 9f8:	80 93 72 00 	sts	0x0072, r24
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	08 95       	ret
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	08 95       	ret
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	08 95       	ret

00000a08 <LcdChr>:
 a08:	1f 93       	push	r17
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	20 91 72 00 	lds	r18, 0x0072
 a12:	30 91 73 00 	lds	r19, 0x0073
 a16:	40 91 76 00 	lds	r20, 0x0076
 a1a:	50 91 77 00 	lds	r21, 0x0077
 a1e:	24 17       	cp	r18, r20
 a20:	35 07       	cpc	r19, r21
 a22:	24 f4       	brge	.+8      	; 0xa2c <LcdChr+0x24>
 a24:	30 93 77 00 	sts	0x0077, r19
 a28:	20 93 76 00 	sts	0x0076, r18
 a2c:	e0 ee       	ldi	r30, 0xE0	; 224
 a2e:	e6 0f       	add	r30, r22
 a30:	e0 36       	cpi	r30, 0x60	; 96
 a32:	30 f0       	brcs	.+12     	; 0xa40 <LcdChr+0x38>
 a34:	60 3c       	cpi	r22, 0xC0	; 192
 a36:	18 f0       	brcs	.+6      	; 0xa3e <LcdChr+0x36>
 a38:	e0 ea       	ldi	r30, 0xA0	; 160
 a3a:	e6 0f       	add	r30, r22
 a3c:	01 c0       	rjmp	.+2      	; 0xa40 <LcdChr+0x38>
 a3e:	ef e5       	ldi	r30, 0x5F	; 95
 a40:	81 30       	cpi	r24, 0x01	; 1
 a42:	49 f5       	brne	.+82     	; 0xa96 <LcdChr+0x8e>
 a44:	60 91 72 00 	lds	r22, 0x0072
 a48:	70 91 73 00 	lds	r23, 0x0073
 a4c:	cb 01       	movw	r24, r22
 a4e:	ab 01       	movw	r20, r22
 a50:	4b 5f       	subi	r20, 0xFB	; 251
 a52:	5f 4f       	sbci	r21, 0xFF	; 255
 a54:	2e 2f       	mov	r18, r30
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	f9 01       	movw	r30, r18
 a5a:	ee 0f       	add	r30, r30
 a5c:	ff 1f       	adc	r31, r31
 a5e:	ee 0f       	add	r30, r30
 a60:	ff 1f       	adc	r31, r31
 a62:	2e 0f       	add	r18, r30
 a64:	3f 1f       	adc	r19, r31
 a66:	26 1b       	sub	r18, r22
 a68:	37 0b       	sbc	r19, r23
 a6a:	28 5c       	subi	r18, 0xC8	; 200
 a6c:	3f 4f       	sbci	r19, 0xFF	; 255
 a6e:	f9 01       	movw	r30, r18
 a70:	e8 0f       	add	r30, r24
 a72:	f9 1f       	adc	r31, r25
 a74:	e4 91       	lpm	r30, Z
 a76:	dc 01       	movw	r26, r24
 a78:	a8 58       	subi	r26, 0x88	; 136
 a7a:	bf 4f       	sbci	r27, 0xFF	; 255
 a7c:	ee 0f       	add	r30, r30
 a7e:	ec 93       	st	X, r30
 a80:	01 96       	adiw	r24, 0x01	; 1
 a82:	84 17       	cp	r24, r20
 a84:	95 07       	cpc	r25, r21
 a86:	99 f7       	brne	.-26     	; 0xa6e <LcdChr+0x66>
 a88:	6b 5f       	subi	r22, 0xFB	; 251
 a8a:	7f 4f       	sbci	r23, 0xFF	; 255
 a8c:	70 93 73 00 	sts	0x0073, r23
 a90:	60 93 72 00 	sts	0x0072, r22
 a94:	72 c0       	rjmp	.+228    	; 0xb7a <LcdChr+0x172>
 a96:	82 30       	cpi	r24, 0x02	; 2
 a98:	09 f0       	breq	.+2      	; 0xa9c <LcdChr+0x94>
 a9a:	6f c0       	rjmp	.+222    	; 0xb7a <LcdChr+0x172>
 a9c:	c9 01       	movw	r24, r18
 a9e:	84 55       	subi	r24, 0x54	; 84
 aa0:	91 09       	sbc	r25, r1
 aa2:	40 91 76 00 	lds	r20, 0x0076
 aa6:	50 91 77 00 	lds	r21, 0x0077
 aaa:	84 17       	cp	r24, r20
 aac:	95 07       	cpc	r25, r21
 aae:	24 f4       	brge	.+8      	; 0xab8 <LcdChr+0xb0>
 ab0:	90 93 77 00 	sts	0x0077, r25
 ab4:	80 93 76 00 	sts	0x0076, r24
 ab8:	99 23       	and	r25, r25
 aba:	0c f4       	brge	.+2      	; 0xabe <LcdChr+0xb6>
 abc:	82 c0       	rjmp	.+260    	; 0xbc2 <LcdChr+0x1ba>
 abe:	8e 2f       	mov	r24, r30
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	fc 01       	movw	r30, r24
 ac4:	ee 0f       	add	r30, r30
 ac6:	ff 1f       	adc	r31, r31
 ac8:	ee 0f       	add	r30, r30
 aca:	ff 1f       	adc	r31, r31
 acc:	e8 0f       	add	r30, r24
 ace:	f9 1f       	adc	r31, r25
 ad0:	e8 5c       	subi	r30, 0xC8	; 200
 ad2:	ff 4f       	sbci	r31, 0xFF	; 255
 ad4:	d9 01       	movw	r26, r18
 ad6:	ab 5d       	subi	r26, 0xDB	; 219
 ad8:	bf 4f       	sbci	r27, 0xFF	; 255
 ada:	c9 01       	movw	r24, r18
 adc:	81 5d       	subi	r24, 0xD1	; 209
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	18 e1       	ldi	r17, 0x18	; 24
 ae2:	44 91       	lpm	r20, Z
 ae4:	44 0f       	add	r20, r20
 ae6:	54 2f       	mov	r21, r20
 ae8:	54 70       	andi	r21, 0x04	; 4
 aea:	65 2f       	mov	r22, r21
 aec:	66 0f       	add	r22, r22
 aee:	56 0f       	add	r21, r22
 af0:	55 0f       	add	r21, r21
 af2:	55 0f       	add	r21, r21
 af4:	64 2f       	mov	r22, r20
 af6:	62 70       	andi	r22, 0x02	; 2
 af8:	76 2f       	mov	r23, r22
 afa:	77 0f       	add	r23, r23
 afc:	67 0f       	add	r22, r23
 afe:	66 0f       	add	r22, r22
 b00:	56 2b       	or	r21, r22
 b02:	74 2f       	mov	r23, r20
 b04:	78 70       	andi	r23, 0x08	; 8
 b06:	71 9f       	mul	r23, r17
 b08:	70 2d       	mov	r23, r0
 b0a:	11 24       	eor	r1, r1
 b0c:	57 2b       	or	r21, r23
 b0e:	42 95       	swap	r20
 b10:	4f 70       	andi	r20, 0x0F	; 15
 b12:	64 2f       	mov	r22, r20
 b14:	61 70       	andi	r22, 0x01	; 1
 b16:	76 2f       	mov	r23, r22
 b18:	77 0f       	add	r23, r23
 b1a:	67 0f       	add	r22, r23
 b1c:	74 2f       	mov	r23, r20
 b1e:	72 70       	andi	r23, 0x02	; 2
 b20:	c7 2f       	mov	r28, r23
 b22:	cc 0f       	add	r28, r28
 b24:	7c 0f       	add	r23, r28
 b26:	77 0f       	add	r23, r23
 b28:	76 2b       	or	r23, r22
 b2a:	64 2f       	mov	r22, r20
 b2c:	64 70       	andi	r22, 0x04	; 4
 b2e:	c6 2f       	mov	r28, r22
 b30:	cc 0f       	add	r28, r28
 b32:	6c 0f       	add	r22, r28
 b34:	c6 2f       	mov	r28, r22
 b36:	cc 0f       	add	r28, r28
 b38:	cc 0f       	add	r28, r28
 b3a:	67 2f       	mov	r22, r23
 b3c:	6c 2b       	or	r22, r28
 b3e:	48 70       	andi	r20, 0x08	; 8
 b40:	41 9f       	mul	r20, r17
 b42:	c0 2d       	mov	r28, r0
 b44:	11 24       	eor	r1, r1
 b46:	46 2f       	mov	r20, r22
 b48:	4c 2b       	or	r20, r28
 b4a:	ed 01       	movw	r28, r26
 b4c:	21 97       	sbiw	r28, 0x01	; 1
 b4e:	58 83       	st	Y, r21
 b50:	5c 93       	st	X, r21
 b52:	cc 5a       	subi	r28, 0xAC	; 172
 b54:	df 4f       	sbci	r29, 0xFF	; 255
 b56:	48 83       	st	Y, r20
 b58:	21 96       	adiw	r28, 0x01	; 1
 b5a:	48 83       	st	Y, r20
 b5c:	31 96       	adiw	r30, 0x01	; 1
 b5e:	12 96       	adiw	r26, 0x02	; 2
 b60:	a8 17       	cp	r26, r24
 b62:	b9 07       	cpc	r27, r25
 b64:	09 f0       	breq	.+2      	; 0xb68 <LcdChr+0x160>
 b66:	bd cf       	rjmp	.-134    	; 0xae2 <LcdChr+0xda>
 b68:	c9 01       	movw	r24, r18
 b6a:	0b 96       	adiw	r24, 0x0b	; 11
 b6c:	68 ef       	ldi	r22, 0xF8	; 248
 b6e:	71 e0       	ldi	r23, 0x01	; 1
 b70:	ca d0       	rcall	.+404    	; 0xd06 <__divmodhi4>
 b72:	90 93 73 00 	sts	0x0073, r25
 b76:	80 93 72 00 	sts	0x0072, r24
 b7a:	80 91 72 00 	lds	r24, 0x0072
 b7e:	90 91 73 00 	lds	r25, 0x0073
 b82:	20 91 74 00 	lds	r18, 0x0074
 b86:	30 91 75 00 	lds	r19, 0x0075
 b8a:	28 17       	cp	r18, r24
 b8c:	39 07       	cpc	r19, r25
 b8e:	24 f4       	brge	.+8      	; 0xb98 <LcdChr+0x190>
 b90:	90 93 75 00 	sts	0x0075, r25
 b94:	80 93 74 00 	sts	0x0074, r24
 b98:	fc 01       	movw	r30, r24
 b9a:	e8 58       	subi	r30, 0x88	; 136
 b9c:	ff 4f       	sbci	r31, 0xFF	; 255
 b9e:	10 82       	st	Z, r1
 ba0:	87 3f       	cpi	r24, 0xF7	; 247
 ba2:	21 e0       	ldi	r18, 0x01	; 1
 ba4:	92 07       	cpc	r25, r18
 ba6:	31 f4       	brne	.+12     	; 0xbb4 <LcdChr+0x1ac>
 ba8:	10 92 73 00 	sts	0x0073, r1
 bac:	10 92 72 00 	sts	0x0072, r1
 bb0:	82 e0       	ldi	r24, 0x02	; 2
 bb2:	08 c0       	rjmp	.+16     	; 0xbc4 <LcdChr+0x1bc>
 bb4:	01 96       	adiw	r24, 0x01	; 1
 bb6:	90 93 73 00 	sts	0x0073, r25
 bba:	80 93 72 00 	sts	0x0072, r24
 bbe:	80 e0       	ldi	r24, 0x00	; 0
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <LcdChr+0x1bc>
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	08 95       	ret

00000bcc <Lcd_print>:
 bcc:	0f 93       	push	r16
 bce:	1f 93       	push	r17
 bd0:	cf 93       	push	r28
 bd2:	df 93       	push	r29
 bd4:	04 2f       	mov	r16, r20
 bd6:	e9 01       	movw	r28, r18
 bd8:	fc de       	rcall	.-520    	; 0x9d2 <LcdGotoXY>
 bda:	68 81       	ld	r22, Y
 bdc:	66 23       	and	r22, r22
 bde:	69 f0       	breq	.+26     	; 0xbfa <Lcd_print+0x2e>
 be0:	10 e0       	ldi	r17, 0x00	; 0
 be2:	80 2f       	mov	r24, r16
 be4:	11 df       	rcall	.-478    	; 0xa08 <LcdChr>
 be6:	81 30       	cpi	r24, 0x01	; 1
 be8:	51 f0       	breq	.+20     	; 0xbfe <Lcd_print+0x32>
 bea:	1f 5f       	subi	r17, 0xFF	; 255
 bec:	fe 01       	movw	r30, r28
 bee:	e1 0f       	add	r30, r17
 bf0:	f1 1d       	adc	r31, r1
 bf2:	60 81       	ld	r22, Z
 bf4:	61 11       	cpse	r22, r1
 bf6:	f5 cf       	rjmp	.-22     	; 0xbe2 <Lcd_print+0x16>
 bf8:	04 c0       	rjmp	.+8      	; 0xc02 <Lcd_print+0x36>
 bfa:	80 e0       	ldi	r24, 0x00	; 0
 bfc:	03 c0       	rjmp	.+6      	; 0xc04 <Lcd_print+0x38>
 bfe:	81 e0       	ldi	r24, 0x01	; 1
 c00:	01 c0       	rjmp	.+2      	; 0xc04 <Lcd_print+0x38>
 c02:	80 e0       	ldi	r24, 0x00	; 0
 c04:	df 91       	pop	r29
 c06:	cf 91       	pop	r28
 c08:	1f 91       	pop	r17
 c0a:	0f 91       	pop	r16
 c0c:	08 95       	ret

00000c0e <Lcd_prints>:
 c0e:	1f 93       	push	r17
 c10:	cf 93       	push	r28
 c12:	df 93       	push	r29
 c14:	14 2f       	mov	r17, r20
 c16:	e9 01       	movw	r28, r18
 c18:	dc de       	rcall	.-584    	; 0x9d2 <LcdGotoXY>
 c1a:	fe 01       	movw	r30, r28
 c1c:	64 91       	lpm	r22, Z
 c1e:	66 23       	and	r22, r22
 c20:	51 f0       	breq	.+20     	; 0xc36 <Lcd_prints+0x28>
 c22:	81 2f       	mov	r24, r17
 c24:	f1 de       	rcall	.-542    	; 0xa08 <LcdChr>
 c26:	81 30       	cpi	r24, 0x01	; 1
 c28:	41 f0       	breq	.+16     	; 0xc3a <Lcd_prints+0x2c>
 c2a:	21 96       	adiw	r28, 0x01	; 1
 c2c:	fe 01       	movw	r30, r28
 c2e:	64 91       	lpm	r22, Z
 c30:	61 11       	cpse	r22, r1
 c32:	f7 cf       	rjmp	.-18     	; 0xc22 <Lcd_prints+0x14>
 c34:	04 c0       	rjmp	.+8      	; 0xc3e <Lcd_prints+0x30>
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	03 c0       	rjmp	.+6      	; 0xc40 <Lcd_prints+0x32>
 c3a:	81 e0       	ldi	r24, 0x01	; 1
 c3c:	01 c0       	rjmp	.+2      	; 0xc40 <Lcd_prints+0x32>
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	df 91       	pop	r29
 c42:	cf 91       	pop	r28
 c44:	1f 91       	pop	r17
 c46:	08 95       	ret

00000c48 <Lcd_pixel>:
 c48:	84 35       	cpi	r24, 0x54	; 84
 c4a:	08 f0       	brcs	.+2      	; 0xc4e <Lcd_pixel+0x6>
 c4c:	56 c0       	rjmp	.+172    	; 0xcfa <Lcd_pixel+0xb2>
 c4e:	60 33       	cpi	r22, 0x30	; 48
 c50:	08 f0       	brcs	.+2      	; 0xc54 <Lcd_pixel+0xc>
 c52:	55 c0       	rjmp	.+170    	; 0xcfe <Lcd_pixel+0xb6>
 c54:	26 2f       	mov	r18, r22
 c56:	26 95       	lsr	r18
 c58:	26 95       	lsr	r18
 c5a:	26 95       	lsr	r18
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	34 e5       	ldi	r19, 0x54	; 84
 c60:	23 9f       	mul	r18, r19
 c62:	80 0d       	add	r24, r0
 c64:	91 1d       	adc	r25, r1
 c66:	11 24       	eor	r1, r1
 c68:	22 0f       	add	r18, r18
 c6a:	22 0f       	add	r18, r18
 c6c:	22 0f       	add	r18, r18
 c6e:	62 1b       	sub	r22, r18
 c70:	fc 01       	movw	r30, r24
 c72:	e8 58       	subi	r30, 0x88	; 136
 c74:	ff 4f       	sbci	r31, 0xFF	; 255
 c76:	50 81       	ld	r21, Z
 c78:	41 11       	cpse	r20, r1
 c7a:	0c c0       	rjmp	.+24     	; 0xc94 <Lcd_pixel+0x4c>
 c7c:	21 e0       	ldi	r18, 0x01	; 1
 c7e:	30 e0       	ldi	r19, 0x00	; 0
 c80:	f9 01       	movw	r30, r18
 c82:	02 c0       	rjmp	.+4      	; 0xc88 <Lcd_pixel+0x40>
 c84:	ee 0f       	add	r30, r30
 c86:	ff 1f       	adc	r31, r31
 c88:	6a 95       	dec	r22
 c8a:	e2 f7       	brpl	.-8      	; 0xc84 <Lcd_pixel+0x3c>
 c8c:	bf 01       	movw	r22, r30
 c8e:	60 95       	com	r22
 c90:	56 23       	and	r21, r22
 c92:	17 c0       	rjmp	.+46     	; 0xcc2 <Lcd_pixel+0x7a>
 c94:	41 30       	cpi	r20, 0x01	; 1
 c96:	51 f4       	brne	.+20     	; 0xcac <Lcd_pixel+0x64>
 c98:	21 e0       	ldi	r18, 0x01	; 1
 c9a:	30 e0       	ldi	r19, 0x00	; 0
 c9c:	f9 01       	movw	r30, r18
 c9e:	02 c0       	rjmp	.+4      	; 0xca4 <Lcd_pixel+0x5c>
 ca0:	ee 0f       	add	r30, r30
 ca2:	ff 1f       	adc	r31, r31
 ca4:	6a 95       	dec	r22
 ca6:	e2 f7       	brpl	.-8      	; 0xca0 <Lcd_pixel+0x58>
 ca8:	5e 2b       	or	r21, r30
 caa:	0b c0       	rjmp	.+22     	; 0xcc2 <Lcd_pixel+0x7a>
 cac:	42 30       	cpi	r20, 0x02	; 2
 cae:	49 f4       	brne	.+18     	; 0xcc2 <Lcd_pixel+0x7a>
 cb0:	21 e0       	ldi	r18, 0x01	; 1
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	f9 01       	movw	r30, r18
 cb6:	02 c0       	rjmp	.+4      	; 0xcbc <Lcd_pixel+0x74>
 cb8:	ee 0f       	add	r30, r30
 cba:	ff 1f       	adc	r31, r31
 cbc:	6a 95       	dec	r22
 cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <Lcd_pixel+0x70>
 cc0:	5e 27       	eor	r21, r30
 cc2:	fc 01       	movw	r30, r24
 cc4:	e8 58       	subi	r30, 0x88	; 136
 cc6:	ff 4f       	sbci	r31, 0xFF	; 255
 cc8:	50 83       	st	Z, r21
 cca:	20 91 76 00 	lds	r18, 0x0076
 cce:	30 91 77 00 	lds	r19, 0x0077
 cd2:	82 17       	cp	r24, r18
 cd4:	93 07       	cpc	r25, r19
 cd6:	24 f4       	brge	.+8      	; 0xce0 <Lcd_pixel+0x98>
 cd8:	90 93 77 00 	sts	0x0077, r25
 cdc:	80 93 76 00 	sts	0x0076, r24
 ce0:	20 91 74 00 	lds	r18, 0x0074
 ce4:	30 91 75 00 	lds	r19, 0x0075
 ce8:	28 17       	cp	r18, r24
 cea:	39 07       	cpc	r19, r25
 cec:	54 f4       	brge	.+20     	; 0xd02 <Lcd_pixel+0xba>
 cee:	90 93 75 00 	sts	0x0075, r25
 cf2:	80 93 74 00 	sts	0x0074, r24
 cf6:	80 e0       	ldi	r24, 0x00	; 0
 cf8:	08 95       	ret
 cfa:	81 e0       	ldi	r24, 0x01	; 1
 cfc:	08 95       	ret
 cfe:	81 e0       	ldi	r24, 0x01	; 1
 d00:	08 95       	ret
 d02:	80 e0       	ldi	r24, 0x00	; 0
 d04:	08 95       	ret

00000d06 <__divmodhi4>:
 d06:	97 fb       	bst	r25, 7
 d08:	07 2e       	mov	r0, r23
 d0a:	16 f4       	brtc	.+4      	; 0xd10 <__divmodhi4+0xa>
 d0c:	00 94       	com	r0
 d0e:	06 d0       	rcall	.+12     	; 0xd1c <__divmodhi4_neg1>
 d10:	77 fd       	sbrc	r23, 7
 d12:	08 d0       	rcall	.+16     	; 0xd24 <__divmodhi4_neg2>
 d14:	17 d0       	rcall	.+46     	; 0xd44 <__udivmodhi4>
 d16:	07 fc       	sbrc	r0, 7
 d18:	05 d0       	rcall	.+10     	; 0xd24 <__divmodhi4_neg2>
 d1a:	3e f4       	brtc	.+14     	; 0xd2a <__divmodhi4_exit>

00000d1c <__divmodhi4_neg1>:
 d1c:	90 95       	com	r25
 d1e:	81 95       	neg	r24
 d20:	9f 4f       	sbci	r25, 0xFF	; 255
 d22:	08 95       	ret

00000d24 <__divmodhi4_neg2>:
 d24:	70 95       	com	r23
 d26:	61 95       	neg	r22
 d28:	7f 4f       	sbci	r23, 0xFF	; 255

00000d2a <__divmodhi4_exit>:
 d2a:	08 95       	ret

00000d2c <__umulhisi3>:
 d2c:	a2 9f       	mul	r26, r18
 d2e:	b0 01       	movw	r22, r0
 d30:	b3 9f       	mul	r27, r19
 d32:	c0 01       	movw	r24, r0
 d34:	a3 9f       	mul	r26, r19
 d36:	01 d0       	rcall	.+2      	; 0xd3a <__umulhisi3+0xe>
 d38:	b2 9f       	mul	r27, r18
 d3a:	70 0d       	add	r23, r0
 d3c:	81 1d       	adc	r24, r1
 d3e:	11 24       	eor	r1, r1
 d40:	91 1d       	adc	r25, r1
 d42:	08 95       	ret

00000d44 <__udivmodhi4>:
 d44:	aa 1b       	sub	r26, r26
 d46:	bb 1b       	sub	r27, r27
 d48:	51 e1       	ldi	r21, 0x11	; 17
 d4a:	07 c0       	rjmp	.+14     	; 0xd5a <__udivmodhi4_ep>

00000d4c <__udivmodhi4_loop>:
 d4c:	aa 1f       	adc	r26, r26
 d4e:	bb 1f       	adc	r27, r27
 d50:	a6 17       	cp	r26, r22
 d52:	b7 07       	cpc	r27, r23
 d54:	10 f0       	brcs	.+4      	; 0xd5a <__udivmodhi4_ep>
 d56:	a6 1b       	sub	r26, r22
 d58:	b7 0b       	sbc	r27, r23

00000d5a <__udivmodhi4_ep>:
 d5a:	88 1f       	adc	r24, r24
 d5c:	99 1f       	adc	r25, r25
 d5e:	5a 95       	dec	r21
 d60:	a9 f7       	brne	.-22     	; 0xd4c <__udivmodhi4_loop>
 d62:	80 95       	com	r24
 d64:	90 95       	com	r25
 d66:	bc 01       	movw	r22, r24
 d68:	cd 01       	movw	r24, r26
 d6a:	08 95       	ret

00000d6c <__utoa_ncheck>:
 d6c:	bb 27       	eor	r27, r27

00000d6e <__utoa_common>:
 d6e:	fb 01       	movw	r30, r22
 d70:	55 27       	eor	r21, r21
 d72:	aa 27       	eor	r26, r26
 d74:	88 0f       	add	r24, r24
 d76:	99 1f       	adc	r25, r25
 d78:	aa 1f       	adc	r26, r26
 d7a:	a4 17       	cp	r26, r20
 d7c:	10 f0       	brcs	.+4      	; 0xd82 <__utoa_common+0x14>
 d7e:	a4 1b       	sub	r26, r20
 d80:	83 95       	inc	r24
 d82:	50 51       	subi	r21, 0x10	; 16
 d84:	b9 f7       	brne	.-18     	; 0xd74 <__utoa_common+0x6>
 d86:	a0 5d       	subi	r26, 0xD0	; 208
 d88:	aa 33       	cpi	r26, 0x3A	; 58
 d8a:	08 f0       	brcs	.+2      	; 0xd8e <__utoa_common+0x20>
 d8c:	a9 5d       	subi	r26, 0xD9	; 217
 d8e:	a1 93       	st	Z+, r26
 d90:	00 97       	sbiw	r24, 0x00	; 0
 d92:	79 f7       	brne	.-34     	; 0xd72 <__utoa_common+0x4>
 d94:	b1 11       	cpse	r27, r1
 d96:	b1 93       	st	Z+, r27
 d98:	11 92       	st	Z+, r1
 d9a:	cb 01       	movw	r24, r22
 d9c:	00 c0       	rjmp	.+0      	; 0xd9e <strrev>

00000d9e <strrev>:
 d9e:	dc 01       	movw	r26, r24
 da0:	fc 01       	movw	r30, r24
 da2:	67 2f       	mov	r22, r23
 da4:	71 91       	ld	r23, Z+
 da6:	77 23       	and	r23, r23
 da8:	e1 f7       	brne	.-8      	; 0xda2 <strrev+0x4>
 daa:	32 97       	sbiw	r30, 0x02	; 2
 dac:	04 c0       	rjmp	.+8      	; 0xdb6 <strrev+0x18>
 dae:	7c 91       	ld	r23, X
 db0:	6d 93       	st	X+, r22
 db2:	70 83       	st	Z, r23
 db4:	62 91       	ld	r22, -Z
 db6:	ae 17       	cp	r26, r30
 db8:	bf 07       	cpc	r27, r31
 dba:	c8 f3       	brcs	.-14     	; 0xdae <strrev+0x10>
 dbc:	08 95       	ret

00000dbe <_exit>:
 dbe:	f8 94       	cli

00000dc0 <__stop_program>:
 dc0:	ff cf       	rjmp	.-2      	; 0xdc0 <__stop_program>
